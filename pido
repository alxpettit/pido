#!/usr/bin/perl
#! -*- perl -*-

#
# Author: Cassie E Nicol cassieenicol@gmail.com
#

# Notes:
# An Arch Linux Live CD can be downloaded here for testing
# https://www.archlinux.org/download/
    
BEGIN { unshift @INC, '.'; }

use strict;
use warnings;

use Data::Dumper;

use Getopt::Long qw(:config no_ignore_case bundling pass_through no_auto_abbrev );

use Pod::Usage;

use Apt;

#------------------------------------------------------------------------

my $debug = undef;
#$debug = 1;

#------------------------------------------------------------------------
# Define the command line options for GetOpt::Long

# Define the operations
my %operations = (
    'database|D' => \&database,
    'query|Q'    => \&query,
    'remove|R'   => \&remove,
    'sync|S'     => \&sync,
    'deptest|T'  => \&deptest,
    'files|F'    => \&files,
    'version|V'  => \&version,
    'help'       => \&help,
    );

my $confirm = undef;

# Define the Standard Options
my @standard_options = (
    'dbpath|b=s',
    'verbose|v',
    'arch=s',
    'cachedir=s@',
    'color=s',
    'config=s',
    'debug',
    'gpgdir=s',
    'hookdir=s@',
    'logfile=s',
    'noconfirm' => sub { $confirm = undef; },
    'confirm' => sub { $confirm = 1; },
    'disable-download-timeout',
    'sysroot=s',
    'dry-run|n',
    );

    # Fix confirm and noconfirm

# Define Database Options
my @database_options = (
    'asdeps=s',
    'asexplicit=s',
    'check|k',
    'quiet|q',
    );

# Define the Query Options
my @query_options = (
    'changelog|c',
    'deps|d',
    'explicit|e',
    'groups|g',
    'info|i',
    'check|k',
    'list|l',
    'foreign|m',
    'native|n',
    'owns|o=s',
    'file|p',
    'quiet|q',
    'search|s:s@',
    'unrequired|t',
    'upgrades|u',
    );

# Define Remove Options (apply to -R)
my @remove_options = (
    'cascade|c',
    'nosave|n',
    'recursive|s',
    'unneeded|u',
    );

# Define the Sync Options
my @sync_options = (
    'clean|c+',
    'groups|g+',
    'info|i+',
    'list|l',
    'quiet|q',
    'search|s:s@',
    'sysupgrade|u',
    'downloadonly|w',
    'refresh|y+',
    );

# Define Transaction Options (apply to -S, -R, and -U)
my @transaction_options = (
    'nodeps|d+',
    'assume-installed=s',
    'dbonly',
    'noprogressbar',
    'noscriptlet',
    'print|p',
    'print-format=s',
    );

# Define Upgrade Options (apply to -S and -U)
my @upgrade_options = (
    'asdeps',
    'asexplicit',
    'ignore=s',
    'ignoregroup=s',
    'needed',
    'overwrite=s',
    );

# Define File Options (apply to -F)
my @file_options = (
    'refresh|y',
    'list|l',
    'search|s',
    'regex|x',
    'owns|o',
    'quiet|q',
    'machinereadable',
    );

#------------------------------------------------------------------------
# Debug to show on console a bar of dashes when the app starts.

#if($debug) {
    print "------------------------------------------------------------------------------\n";
    print "$0 @ARGV\n";
#}

#------------------------------------------------------------------------
# Save a copy of the command line

my @command_line = @ARGV;
print Data::Dumper->Dump( [\@command_line], ['*command_line']) if($debug);

#------------------------------------------------------------------------
# Define Globals

# Operation to execute
my $operation = undef;

# Options to use based upon the operation
my @options = @standard_options;

# Options found    
my %option_hash = ();

#------------------------------------------------------------------------
# Determine the Operation

my $p = Getopt::Long::Parser->new;
$p->configure( 'no_ignore_case', 'bundling', 'pass_through', 'no_auto_abbrev' );
$p->getoptions(%operations) or die("no operation found");
die "Operation not given." if( ! defined $operation );

print "After operation parse:\n", Data::Dumper->Dump([\@ARGV], ['*ARGV']) if($debug);

#------------------------------------------------------------------------
# Get Options

my $o = Getopt::Long::Parser->new;
$o->configure( 'no_ignore_case', 'bundling', 'no_auto_abbrev' );
$o->getoptions(\%option_hash, @options) or die("trying");

# --confirm and --noconfirm is a special case
if( defined $confirm ) {
  $option_hash{confirm} = $confirm;
}
   
if($debug) {
    print "After option parse:\n";
    if(1) {
	print Data::Dumper->Dump([\%option_hash], [qw(*option_hash)]);
	print Data::Dumper->Dump([\@ARGV], ['*argv']);
    } else {
	print("Options Found\n");
	for my $key (keys %option_hash ) {
	    print("$key");
	    print(": $option_hash{$key}") if( defined $option_hash{$key} );
	    print("\n");
	}
    }
}

#------------------------------------------------------------------------
# Run operation

print "Running operation:" if($debug);
my $result = &{$operation}();
print "result: ${result}\n";
    
exit($result);

#------------------------------------------------------------------------
# Utility functions

sub print_values {
    if($debug) {
	my ($opt_name, $opt_value) = @_;
	$opt_name = 'undef' if( ! defined $opt_name );
	$opt_value = 'undef' if( ! defined $opt_value );
	print("${opt_name}, ${opt_value}\n");
    }
}

sub assign_operation {
    my $callback = shift(@_);
    if( defined $operation ) {
	print "Only one operation allowed\n";
	exit(1);
    } else {
	$operation = $callback;
    }
}
    
#------------------------------------------------------------------------

sub database {
    print_values(@_);
    assign_operation( \&do_database );
    push(@options, @database_options);
}

sub do_database {
    print("do_database()\n");
}

sub query {
    print_values(@_);
    assign_operation( \&do_query );
    push(@options, @query_options);
}

sub do_query {
    print("do_query()\n");
    $a = new Apt;
    $a->query(\%option_hash, \@ARGV);
}

sub remove {
    print_values(@_);
    assign_operation( \&do_remove );
    push(@options, @remove_options);
    push(@options, @transaction_options);
}

sub do_remove {
    print "do_remove()\n";
}

sub sync {
    print_values(@_);
    assign_operation( \&do_sync );
    push(@options, @sync_options);
    push(@options, @transaction_options);
    push(@options, @upgrade_options);
}

sub do_sync {
    print("do_sync()\n");
    $a = new Apt;
    $a->sync(\%option_hash, \@ARGV);
}

sub deptest {
    my ($opt_name, $opt_value) = @_;
    assign_operation( \&do_deptest );
}

sub do_deptest {
    print "do_deptest()\n";
}

sub upgrade {
    print_values(@_);
    assign_operation( \&do_upgrade );
    push(@options, @upgrade_options);
    push(@options, @transaction_options);
}

sub do_upgrade {
    print "do_upgrade()\n";
}

sub files {
    print_values(@_);
    assign_operation( \&do_files );
    push(@options, @file_options);
}

sub do_files {
    print "do_files()\n";
}

sub version {
    print_values(@_);
    assign_operation( \&do_version );
}

sub do_version {
    print "do_version()\n";
}

sub help {
    print_values(@_);
    assign_operation( \&do_help );
    #%options = (%options, @help_options);
}

sub do_help {
    pod2usage(1);
}

#(fset 'print-variable
#   [?  ?  ?  ?  ?p ?r ?i ?n ?t ?\( ?\" right ?\C-k left ?Y backspace ?\C-y ?: ?  ?\C-e ?\{ ?\C-y ?\} ?\\ ?n ?\" ?\) ?\; right])

# Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:

__END__

=head1 NAME

sample - Using Getopt::Long and Pod::Usage

=head1 SYNOPSIS

sample [options] [file ...]

 Options:
   -help            brief help message
   -man             full documentation

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
