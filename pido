#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long qw(GetOptionsFromString);

my %option_hash = ();

my %operations = (
'database|D' => \&database,
'query|Q'    => \&query,
'remove|R'   => \&remove,
'sync|S'     => \&sync,
'deptest|T'  => \&deptest,
'files|F'    => \&files,
'version|V'  => \&version,
'help'       => \&help,
    );

# Define the standard operations
my @standard_options = (
    'dbpath|b=s',
    'verbose|v',
    'arch=s',
    'cachedir=s',
    'color=s',
    'config',
    'debug',
    'gpgdir=s',
    'hookdir=s',
    'logfile=s',
    'noconfirm',
    'confirm',
    'disable_download_timeout',
    'sysroot=s',
    );

my %standard_options = ();
for my $key (@standard_options) {
    $standard_options{$key} = undef;
}

GetOptions(\%option_hash, @standard_options);

print("Options Found\n");
for my $key (keys %option_hash ) {
    print("$key");
    print(": $option_hash{$key}") if( defined $option_hash{$key} );
    print("\n");
}


# Define Database Options
my $asdeps = '';
my $asexplicit = '';
my $check = '';
my $quiet = '';

my %database_options = (
    'asdeps=s' =>\$asdeps,
    'asexplicit=s' =>\$asexplicit,
    'check|k' =>\$check,
    'quiet|q' =>\$quiet,
);



sub database {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("database: ${opt_name}, ${opt_value}\n");

    #my %opts = (%standard_options, %database_options);
    #GetOptions(%opts);
    #printStandardOptions();
    #printDatabaseOptions();
}

sub query {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("query: ${opt_name}, ${opt_value}\n");
}

sub remove {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("remove: ${opt_name}, ${opt_value}\n");
}

sub sync {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("sync: ${opt_name}, ${opt_value}\n");
}

sub deptest {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("deptest: ${opt_name}, ${opt_value}\n");
}

sub upgrade {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("upgrade: ${opt_name}, ${opt_value}\n");
}

sub files {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("files: ${opt_name}, ${opt_value}\n");
}

sub version {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("version: ${opt_name}, ${opt_value}\n");
}

sub help {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("help: ${opt_name}, ${opt_value}\n");
}

sub printStandardOptions {
    # print("Standard Options\n");
    # print("dbpath: ${dbpath}\n");
    # print("verbose: ${verbose}\n");
    # print("arch: ${arch}\n");
    # print("cachedir: ${cachedir}\n");
    # print("color: ${color}\n");
    # print("config: ${config}\n");
    # print("debug: ${debug}\n");
    # print("gpgdir: ${gpgdir}\n");
    # print("hookdir: ${hookdir}\n");
    # print("logfile: ${logfile}\n");
    # print("noconfirm: ${noconfirm}\n");
    # print("confirm: ${confirm}\n");
    # print("disable_download_timeout: ${disable_download_timeout}\n");
    # print("sysroot: ${sysroot}\n");
}

sub printDatabaseOptions {
    print("Database Options\n");
    print("asdeps: ${asdeps}\n");
    print("asexplicit: ${asexplicit}\n");
    print("check: ${check}\n");
    print("quiet: ${quiet}\n");
}

#(fset 'print-variable
#   [?  ?  ?  ?  ?p ?r ?i ?n ?t ?\( ?\" right ?\C-k left ?Y backspace ?\C-y ?: ?  ?\C-e ?\{ ?\C-y ?\} ?\\ ?n ?\" ?\) ?\; right])

# Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:

__END__

=head1 NAME

sample - Using Getopt::Long and Pod::Usage

=head1 SYNOPSIS

sample [options] [file ...]

 Options:
   -help            brief help message
   -man             full documentation

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
