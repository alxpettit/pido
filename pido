#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;

use Getopt::Long qw(:config no_ignore_case bundling);

# Define the operations
my %operations = (
'database|D' => \&database,
'query|Q'    => \&query,
'remove|R'   => \&remove,
'sync|S'     => \&sync,
'deptest|T'  => \&deptest,
'files|F'    => \&files,
'version|V'  => \&version,
'help'       => \&help,
    );

# Define the Standard Options
my @standard_options = (
    'dbpath|b=s',
    'verbose|v',
    'arch=s',
    'cachedir=s',
    'color=s',
    'config',
    'debug',
    'gpgdir=s',
    'hookdir=s',
    'logfile=s',
    'noconfirm',
    'confirm',
    'disable_download_timeout',
    'sysroot=s',
    );

# Define Database Options
my @database_options = (
    'asdeps=s',
    'asexplicit=s',
    'check|k',
    'quiet|q',
    );

# Define the Query Options
my @query_options = (
'changelog|c',
'deps|d',
'explicit|e',
'groups|g',
'info|i',
'check|k',
'list|l',
'foreign|m',
'native|n',
'owns|o=s',
'file|p',
'quiet|q',
'search|s=s',
'unrequired|t',
'upgrades|u',
    );

# Define the Sync Options
my @sync_options = (
'clean',
'groups',
'info',
'list',
'quiet',
'search=s',
'sysupgrade|u',
'downloadonly|w',
'refresh|y',
    );

#
# Get Options
#

my %option_hash = ();

GetOptions(\%option_hash, %operations, 
	   @standard_options,
	   @database_options,
	   @query_options,
	   @sync_options
    );

if(1) {
print Dumper(\%option_hash);
} else {
print("Options Found\n");
for my $key (keys %option_hash ) {
    print("$key");
    print(": $option_hash{$key}") if( defined $option_hash{$key} );
    print("\n");
}
}

sub database {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("database: ${opt_name}, ${opt_value}\n");
}

sub query {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("query: ${opt_name}, ${opt_value}\n");
}

sub remove {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("remove: ${opt_name}, ${opt_value}\n");
}

sub sync {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("sync: ${opt_name}, ${opt_value}\n");
}

sub deptest {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("deptest: ${opt_name}, ${opt_value}\n");
}

sub upgrade {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("upgrade: ${opt_name}, ${opt_value}\n");
}

sub files {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("files: ${opt_name}, ${opt_value}\n");
}

sub version {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("version: ${opt_name}, ${opt_value}\n");
}

sub help {
    my ($opt_name, $opt_value) = $@;
    $opt_name = 'undef' if( ! defined $opt_name );
    $opt_value = 'undef' if( ! defined $opt_value );
    print("help: ${opt_name}, ${opt_value}\n");
}


#(fset 'print-variable
#   [?  ?  ?  ?  ?p ?r ?i ?n ?t ?\( ?\" right ?\C-k left ?Y backspace ?\C-y ?: ?  ?\C-e ?\{ ?\C-y ?\} ?\\ ?n ?\" ?\) ?\; right])

# Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:

__END__

=head1 NAME

sample - Using Getopt::Long and Pod::Usage

=head1 SYNOPSIS

sample [options] [file ...]

 Options:
   -help            brief help message
   -man             full documentation

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
